/*****************************************
Description:清华大学严蔚敏描述的实现
Copyright: Doux
Author: Pumpkinor
Date: 2016/12/25
Email: pumpkinor@163.com
*****************************************/

#include<stdio.h>
#include<malloc.h>

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
#define STACK_INIT_SIZE 100 //存储空间的初始分配量
#define STACKINCREMENT 10   //存储空间分配增量

/*********顺序存储栈的表示与实现*********/
typedef int Status;
typedef int ElemType;

/*********栈的顺序存储表示*********/
typedef struct
{
    ElemType *top;  //栈顶指针
    ElemType *base; //栈底指针
    int stacksize;  //当前已分配的存储空间，以元素为单位
}SqStack;

/*********基本操作的函数原型说明*********/
Status InitStack(SqStack &S);
    //构造一个空栈
Status DestroyStack(SqStack &S);
    //销毁栈S
Status ClearStack(SqStack &S);
    //把S置为空栈
Status StackEmpty(SqStack S);
    //如果S为空栈，则返回OK，否则就返回ERROR
int StackLength(SqStack S);
    //返回S中的元素个数，即栈的长度
Status GetTop(SqStack S,ElemType &e);
    //若栈S不空，则用e返回S的栈顶元素值，并返回OK，否则返回ERROR
Status Push(SqStack &S,ElemType e);
    //插入元素e作为栈顶元素
Status Pop(SqStack &S,ElemType &e);
    //若栈S不空，则删除栈顶元素并用e返回S的栈顶元素值，并返回OK，否则返回ERROR
Status StackTraverse(SqStack S);
//遍历输出栈

/*********主函数*********/
int main()
{
    SqStack S;
    printf("构造一个空栈\n");
    InitStack(S);
    int i,n ;
    printf("输入栈的长度:\n");
    scanf("%d",&n);
    for (i = 1; i <= n; i++)
    {
        printf("输入栈的第%d个元素\n",i);
        ++S.top;
        scanf("%d",&n);*(S.top-1);
    }
    cout << "……本栈是空栈吗？？……" << endl;
    if (StackEmpty(S) == 1)
        cout << "NO !!!" << endl;
    else
        cout << "YES !!!" << endl;
    cout << "……求出栈的长度……" << endl;
    int m;
    m = StackLength(S);
    cout << "栈的长度是:" << endl;
    cout << m << endl;
    cout << "遍历输出栈中的所有元素:" << endl;
    StackTraverse(S);
    cout << endl;
    cout << "……输出栈顶元素……" << endl;
    int e;
    e = GetTop(S, e);
    cout << "栈顶元素是:" << endl;
    cout << e << endl;
    cout << "……栈顶插入元素……" << endl;
    cout << "请输入要插入的元素的数值:" << endl;
    cin >> e;
    Push(S,e);
    cout << "现在栈中的元素是:" << endl;
    StackTraverse(S);
    cout << endl;
    cout << "……栈顶删除元素……" << endl;
    e = Pop(S,e);
    cout << "被删除的元素是:" << endl;
    cout << e << endl;
    cout << "现在栈中的元素是:" << endl;
    StackTraverse(S);
    cout << endl;
    cout << "……清空栈……" << endl;
    ClearStack(S);
    cout << "现在栈中的元素是:" << endl;
    StackTraverse(S);
    cout << "……销毁栈……" << endl;
    if(DestroyStack(S)==1)
        cout << "销毁栈成功" << endl;
    else
        cout << "销毁栈失败" << endl;
    cout << "恭喜您成功完成所有的功能,毕竟您那么帅!!!" << endl;
    return 0;
}

/*********基本操作的函数算法描述*********/
Status InitStack(SqStack &S)
    //构造一个空栈
{
    S.base = (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));
    if(!S.base)
        exit(OVERFLOW); //存储分配失败
    S.top = S.base;
    S.stacksize = STACK_INIT_SIZE;
    return OK;
}

Status DestroyStack(SqStack &S)
    //销毁栈S
{
    S.top = NULL;   //栈顶指针指向空
    free(S.base);
    S.stacksize = 0;
    return OK;
}

Status ClearStack(SqStack &S)
    //把S置为空栈
{
    S.top = S.base;
    return OK;
}

Status StackEmpty(SqStack S)
    //如果S为空栈，则返回OK，否则就返回ERROR
{
    if(S.top == S.base)
        return OK;
    else
        return ERROR;
}

int StackLength(SqStack S)
    //返回S中的元素个数，即栈的长度
{
    if(S.top == S.base)
        return 0;
    else
        return(S.top - S.base);
}

Status GetTop(SqStack S,ElemType &e)
    //若栈S不空，则用e返回S的栈顶元素值，并返回OK，否则返回ERROR
{
    if(S.top == S.base)
        return ERROR;
    else{
        e = *(S.top - 1);
        return OK;
    }
}

Status Push(SqStack &S,ElemType e)
    //插入元素e作为栈顶元素
{
    if(S.top - S.base >= S.stacksize){
        //栈满，追加存储空间
        S.base = (ElemType *)realloc(S.base,(S.stacksize + STACKINCREMENT) * sizeof(ElemType));
        if(!S.base)
            exit(OVERFLOW); //存储分配失败
        S.top = S.base + S.stacksize;
        S.stacksize += STACKINCREMENT;
    }
    *S.top = e;
    S.top++;
    return OK;
}

Status Pop(SqStack &S,ElemType &e)
    //若栈S不空，则删除栈顶元素并用e返回S的栈顶元素值，并返回OK，否则返回ERROR
{
    if(S.top == S.base)
        return ERROR;
    e = *--S.top;
    return OK;
}

Status StackTraverse(SqStack S)
//遍历输出栈
{
    if (S.base == NULL)
        return ERROR;
    if (S.top == S.base)
        printf("栈中没有元素");
    ElemType *p;
    p = S.top;
    while (p > S.base)
    {
        p--;
        printf("%d ",*p);
    }
    return OK;
}
